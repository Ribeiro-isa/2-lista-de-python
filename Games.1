{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMQDaF6bKIeBPKVCGtBcCv9",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Ribeiro-isa/2-lista-de-python/blob/main/Games.1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V9-eTXTlGPBB",
        "outputId": "af18c2a1-7e1f-485f-88cf-20e928bc9ab3"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Pense em um PERSONAGEM de Bob Esponja.\n",
            "Responda com: s (sim), n (não) ou ? (pular).\n",
            "Trabalha no Siri Cascudo? [s/n/?] sim\n",
            "É uma esponja do mar? [s/n/?] nao\n"
          ]
        }
      ],
      "source": [
        "# Mini-Akinator: Personagens de Bob Esponja\n",
        "# Como jogar: responda s (sim), n (não) ou ? (pular) para cada pergunta.\n",
        "\n",
        "from collections import defaultdict\n",
        "\n",
        "# --- Base de conhecimento (pode editar/expandir à vontade) ---\n",
        "# Cada personagem tem um dicionário de características booleanas\n",
        "KB = {\n",
        "    \"Bob Esponja\": {\n",
        "        \"especie_esponja\": True, \"especie_estrela\": False, \"especie_lula\": False,\n",
        "        \"especie_caranguejo\": False, \"especie_esquilo\": False, \"especie_caracol\": False,\n",
        "        \"especie_baleia\": False, \"especie_maquina\": False,\n",
        "        \"trabalha_siri_cascudo\": True, \"dono_siri_cascudo\": False, \"cozinha\": True,\n",
        "        \"toca_clarinete\": False, \"texana\": False, \"vilao\": False, \"pet\": False,\n",
        "        \"adolescente\": False, \"professora_de_barco\": False, \"obs_dinheiro\": False,\n",
        "        \"um_olho_so\": False, \"vive_em_abacaxi\": True\n",
        "    },\n",
        "    \"Patrick\": {\n",
        "        \"especie_esponja\": False, \"especie_estrela\": True, \"especie_lula\": False,\n",
        "        \"especie_caranguejo\": False, \"especie_esquilo\": False, \"especie_caracol\": False,\n",
        "        \"especie_baleia\": False, \"especie_maquina\": False,\n",
        "        \"trabalha_siri_cascudo\": False, \"dono_siri_cascudo\": False, \"cozinha\": False,\n",
        "        \"toca_clarinete\": False, \"texana\": False, \"vilao\": False, \"pet\": False,\n",
        "        \"adolescente\": False, \"professora_de_barco\": False, \"obs_dinheiro\": False,\n",
        "        \"um_olho_so\": False, \"vive_em_abacaxi\": False\n",
        "    },\n",
        "    \"Lula Molusco\": {\n",
        "        \"especie_esponja\": False, \"especie_estrela\": False, \"especie_lula\": True,\n",
        "        \"especie_caranguejo\": False, \"especie_esquilo\": False, \"especie_caracol\": False,\n",
        "        \"especie_baleia\": False, \"especie_maquina\": False,\n",
        "        \"trabalha_siri_cascudo\": True, \"dono_siri_cascudo\": False, \"cozinha\": False,\n",
        "        \"toca_clarinete\": True, \"texana\": False, \"vilao\": False, \"pet\": False,\n",
        "        \"adolescente\": False, \"professora_de_barco\": False, \"obs_dinheiro\": False,\n",
        "        \"um_olho_so\": False, \"vive_em_abacaxi\": False\n",
        "    },\n",
        "    \"Seu Siriguejo\": {\n",
        "        \"especie_esponja\": False, \"especie_estrela\": False, \"especie_lula\": False,\n",
        "        \"especie_caranguejo\": True, \"especie_esquilo\": False, \"especie_caracol\": False,\n",
        "        \"especie_baleia\": False, \"especie_maquina\": False,\n",
        "        \"trabalha_siri_cascudo\": True, \"dono_siri_cascudo\": True, \"cozinha\": False,\n",
        "        \"toca_clarinete\": False, \"texana\": False, \"vilao\": False, \"pet\": False,\n",
        "        \"adolescente\": False, \"professora_de_barco\": False, \"obs_dinheiro\": True,\n",
        "        \"um_olho_so\": False, \"vive_em_abacaxi\": False\n",
        "    },\n",
        "    \"Sandy\": {\n",
        "        \"especie_esponja\": False, \"especie_estrela\": False, \"especie_lula\": False,\n",
        "        \"especie_caranguejo\": False, \"especie_esquilo\": True, \"especie_caracol\": False,\n",
        "        \"especie_baleia\": False, \"especie_maquina\": False,\n",
        "        \"trabalha_siri_cascudo\": False, \"dono_siri_cascudo\": False, \"cozinha\": False,\n",
        "        \"toca_clarinete\": False, \"texana\": True, \"vilao\": False, \"pet\": False,\n",
        "        \"adolescente\": False, \"professora_de_barco\": False, \"obs_dinheiro\": False,\n",
        "        \"um_olho_so\": False, \"vive_em_abacaxi\": False\n",
        "    },\n",
        "    \"Plankton\": {\n",
        "        \"especie_esponja\": False, \"especie_estrela\": False, \"especie_lula\": False,\n",
        "        \"especie_caranguejo\": False, \"especie_esquilo\": False, \"especie_caracol\": False,\n",
        "        \"especie_baleia\": False, \"especie_maquina\": False,\n",
        "        \"trabalha_siri_cascudo\": False, \"dono_siri_cascudo\": False, \"cozinha\": False,\n",
        "        \"toca_clarinete\": False, \"texana\": False, \"vilao\": True, \"pet\": False,\n",
        "        \"adolescente\": False, \"professora_de_barco\": False, \"obs_dinheiro\": False,\n",
        "        \"um_olho_so\": True, \"vive_em_abacaxi\": False\n",
        "    },\n",
        "    \"Gary\": {\n",
        "        \"especie_esponja\": False, \"especie_estrela\": False, \"especie_lula\": False,\n",
        "        \"especie_caranguejo\": False, \"especie_esquilo\": False, \"especie_caracol\": True,\n",
        "        \"especie_baleia\": False, \"especie_maquina\": False,\n",
        "        \"trabalha_siri_cascudo\": False, \"dono_siri_cascudo\": False, \"cozinha\": False,\n",
        "        \"toca_clarinete\": False, \"texana\": False, \"vilao\": False, \"pet\": True,\n",
        "        \"adolescente\": False, \"professora_de_barco\": False, \"obs_dinheiro\": False,\n",
        "        \"um_olho_so\": False, \"vive_em_abacaxi\": True\n",
        "    },\n",
        "    \"Sra. Puff\": {\n",
        "        \"especie_esponja\": False, \"especie_estrela\": False, \"especie_lula\": False,\n",
        "        \"especie_caranguejo\": False, \"especie_esquilo\": False, \"especie_caracol\": False,\n",
        "        \"especie_baleia\": False, \"especie_maquina\": False,\n",
        "        \"trabalha_siri_cascudo\": False, \"dono_siri_cascudo\": False, \"cozinha\": False,\n",
        "        \"toca_clarinete\": False, \"texana\": False, \"vilao\": False, \"pet\": False,\n",
        "        \"adolescente\": False, \"professora_de_barco\": True, \"obs_dinheiro\": False,\n",
        "        \"um_olho_so\": False, \"vive_em_abacaxi\": False\n",
        "    },\n",
        "    \"Pearl\": {\n",
        "        \"especie_esponja\": False, \"especie_estrela\": False, \"especie_lula\": False,\n",
        "        \"especie_caranguejo\": False, \"especie_esquilo\": False, \"especie_caracol\": False,\n",
        "        \"especie_baleia\": True, \"especie_maquina\": False,\n",
        "        \"trabalha_siri_cascudo\": False, \"dono_siri_cascudo\": False, \"cozinha\": False,\n",
        "        \"toca_clarinete\": False, \"texana\": False, \"vilao\": False, \"pet\": False,\n",
        "        \"adolescente\": True, \"professora_de_barco\": False, \"obs_dinheiro\": False,\n",
        "        \"um_olho_so\": False, \"vive_em_abacaxi\": False\n",
        "    },\n",
        "    \"Karen\": {\n",
        "        \"especie_esponja\": False, \"especie_estrela\": False, \"especie_lula\": False,\n",
        "        \"especie_caranguejo\": False, \"especie_esquilo\": False, \"especie_caracol\": False,\n",
        "        \"especie_baleia\": False, \"especie_maquina\": True,\n",
        "        \"trabalha_siri_cascudo\": False, \"dono_siri_cascudo\": False, \"cozinha\": False,\n",
        "        \"toca_clarinete\": False, \"texana\": False, \"vilao\": True, \"pet\": False,\n",
        "        \"adolescente\": False, \"professora_de_barco\": False, \"obs_dinheiro\": False,\n",
        "        \"um_olho_so\": False, \"vive_em_abacaxi\": False\n",
        "    },\n",
        "}\n",
        "\n",
        "# Perguntas (mapeadas para as chaves)\n",
        "QUESTOES = {\n",
        "    \"especie_esponja\": \"É uma esponja do mar?\",\n",
        "    \"especie_estrela\": \"É uma estrela-do-mar?\",\n",
        "    \"especie_lula\": \"É uma lula/polvo (tipo o Lula Molusco)?\",\n",
        "    \"especie_caranguejo\": \"É um caranguejo?\",\n",
        "    \"especie_esquilo\": \"É um esquilo que usa traje de mergulho?\",\n",
        "    \"especie_caracol\": \"É um caracol de estimação?\",\n",
        "    \"especie_baleia\": \"É uma baleia?\",\n",
        "    \"especie_maquina\": \"É uma máquina/computador?\",\n",
        "    \"trabalha_siri_cascudo\": \"Trabalha no Siri Cascudo?\",\n",
        "    \"dono_siri_cascudo\": \"É dono(a) do Siri Cascudo?\",\n",
        "    \"cozinha\": \"Trabalha como cozinheiro(a)?\",\n",
        "    \"toca_clarinete\": \"Toca clarinete?\",\n",
        "    \"texana\": \"É texana(o)?\",\n",
        "    \"vilao\": \"Costuma ser vilão/antagonista?\",\n",
        "    \"pet\": \"É um animal de estimação?\",\n",
        "    \"adolescente\": \"É adolescente?\",\n",
        "    \"professora_de_barco\": \"É professora de barco/autoescola submarina?\",\n",
        "    \"obs_dinheiro\": \"É obcecado(a) por dinheiro?\",\n",
        "    \"um_olho_so\": \"Tem um olho só?\",\n",
        "    \"vive_em_abacaxi\": \"Vive num abacaxi?\",\n",
        "}\n",
        "\n",
        "def normaliza_resposta(s: str):\n",
        "    s = s.strip().lower()\n",
        "    if s in (\"s\", \"sim\", \"y\", \"yes\"): return True\n",
        "    if s in (\"n\", \"nao\", \"não\", \"no\"): return False\n",
        "    return None  # pular\n",
        "\n",
        "def melhor_pergunta(candidatos, perguntas_restantes):\n",
        "    # escolhe a pergunta que mais divide (proporção mais próxima de 0.5)\n",
        "    melhor = None\n",
        "    melhor_dist = 1.0\n",
        "    for p in perguntas_restantes:\n",
        "        valores = [KB[c][p] for c in candidatos]\n",
        "        if len(valores) == 0:\n",
        "            continue\n",
        "        proporcao_true = sum(valores) / len(valores)\n",
        "        # se todos iguais (0.0 ou 1.0), não ajuda a dividir — ainda consideramos,\n",
        "        # mas perguntas com 0.5 ganham prioridade\n",
        "        dist = abs(proporcao_true - 0.5)\n",
        "        if dist < melhor_dist:\n",
        "            melhor, melhor_dist = p, dist\n",
        "    return melhor\n",
        "\n",
        "def adivinha(candidatos):\n",
        "    # pega o primeiro como palpite (ou poderia ranquear por algo)\n",
        "    return candidatos[0] if candidatos else None\n",
        "\n",
        "def jogar():\n",
        "    print(\"Pense em um PERSONAGEM de Bob Esponja.\")\n",
        "    print(\"Responda com: s (sim), n (não) ou ? (pular).\")\n",
        "    candidatos = list(KB.keys())\n",
        "    perguntas_restantes = list(QUESTOES.keys())\n",
        "\n",
        "    while True:\n",
        "        if len(candidatos) == 0:\n",
        "            print(\"Hmm... entrei em contradição e perdi todos os candidatos :(\")\n",
        "            break\n",
        "        if len(candidatos) == 1:\n",
        "            palpite = candidatos[0]\n",
        "            resp = input(f\"É {palpite}? [s/n] \")\n",
        "            if normaliza_resposta(resp) is True:\n",
        "                print(\"Acertei! 🎉\")\n",
        "            else:\n",
        "                print(\"Errei dessa vez. 😅\")\n",
        "            break\n",
        "        # escolhe a melhor próxima pergunta\n",
        "        p = melhor_pergunta(candidatos, perguntas_restantes)\n",
        "        if p is None:\n",
        "            # sem perguntas úteis — chuta\n",
        "            palpite = adivinha(candidatos)\n",
        "            resp = input(f\"Vou chutar: é {palpite}? [s/n] \")\n",
        "            if normaliza_resposta(resp) is True:\n",
        "                print(\"Acertei! 🎉\")\n",
        "            else:\n",
        "                print(\"Não consegui adivinhar. Personagens restantes:\", \", \".join(candidatos))\n",
        "            break\n",
        "\n",
        "        # faz a pergunta\n",
        "        q = QUESTOES[p]\n",
        "        resp = input(f\"{q} [s/n/?] \")\n",
        "        val = normaliza_resposta(resp)\n",
        "\n",
        "        # se pulou, só removemos a pergunta do pool e seguimos\n",
        "        perguntas_restantes.remove(p)\n",
        "        if val is None:\n",
        "            continue\n",
        "\n",
        "        # filtra candidatos conforme a resposta\n",
        "        candidatos = [c for c in candidatos if KB[c][p] == val]\n",
        "\n",
        "def main():\n",
        "    while True:\n",
        "        jogar()\n",
        "        denovo = input(\"Quer jogar de novo? [s/n] \")\n",
        "        if normaliza_resposta(denovo) is not True:\n",
        "            print(\"Valeu por jogar! 🧽🐌\")\n",
        "            break\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Mini-Akinator: Cursos de Tecnologia\n",
        "# Jogar: pense em um curso de graduação em tecnologia e responda às perguntas.\n",
        "# Respostas: s (sim), n (não), ? (pular)\n",
        "\n",
        "from collections import defaultdict\n",
        "\n",
        "# --- Base de Conhecimento ---\n",
        "# Cada curso é descrito com características (True/False)\n",
        "KB = {\n",
        "    \"Ciência da Computação\": {\n",
        "        \"programacao\": True, \"hardware\": False, \"gestao\": False, \"redes\": True,\n",
        "        \"design\": False, \"dados\": True, \"engenharia\": False, \"matematica_pesada\": True,\n",
        "        \"curto\": False\n",
        "    },\n",
        "    \"Engenharia de Software\": {\n",
        "        \"programacao\": True, \"hardware\": False, \"gestao\": True, \"redes\": False,\n",
        "        \"design\": False, \"dados\": True, \"engenharia\": True, \"matematica_pesada\": False,\n",
        "        \"curto\": False\n",
        "    },\n",
        "    \"Sistemas de Informação\": {\n",
        "        \"programacao\": True, \"hardware\": False, \"gestao\": True, \"redes\": True,\n",
        "        \"design\": False, \"dados\": True, \"engenharia\": False, \"matematica_pesada\": False,\n",
        "        \"curto\": False\n",
        "    },\n",
        "    \"Engenharia da Computação\": {\n",
        "        \"programacao\": True, \"hardware\": True, \"gestao\": False, \"redes\": True,\n",
        "        \"design\": False, \"dados\": False, \"engenharia\": True, \"matematica_pesada\": True,\n",
        "        \"curto\": False\n",
        "    },\n",
        "    \"Análise e Desenvolvimento de Sistemas\": {\n",
        "        \"programacao\": True, \"hardware\": False, \"gestao\": False, \"redes\": False,\n",
        "        \"design\": False, \"dados\": True, \"engenharia\": False, \"matematica_pesada\": False,\n",
        "        \"curto\": True\n",
        "    },\n",
        "    \"Redes de Computadores\": {\n",
        "        \"programacao\": False, \"hardware\": False, \"gestao\": False, \"redes\": True,\n",
        "        \"design\": False, \"dados\": False, \"engenharia\": False, \"matematica_pesada\": False,\n",
        "        \"curto\": True\n",
        "    },\n",
        "    \"Jogos Digitais\": {\n",
        "        \"programacao\": True, \"hardware\": False, \"gestao\": False, \"redes\": False,\n",
        "        \"design\": True, \"dados\": False, \"engenharia\": False, \"matematica_pesada\": False,\n",
        "        \"curto\": True\n",
        "    },\n",
        "    \"Engenharia de Dados\": {\n",
        "        \"programacao\": True, \"hardware\": False, \"gestao\": False, \"redes\": False,\n",
        "        \"design\": False, \"dados\": True, \"engenharia\": True, \"matematica_pesada\": True,\n",
        "        \"curto\": False\n",
        "    },\n",
        "    \"Ciência de Dados\": {\n",
        "        \"programacao\": True, \"hardware\": False, \"gestao\": False, \"redes\": False,\n",
        "        \"design\": False, \"dados\": True, \"engenharia\": False, \"matematica_pesada\": True,\n",
        "        \"curto\": False\n",
        "    },\n",
        "    \"Design Digital\": {\n",
        "        \"programacao\": False, \"hardware\": False, \"gestao\": False, \"redes\": False,\n",
        "        \"design\": True, \"dados\": False, \"engenharia\": False, \"matematica_pesada\": False,\n",
        "        \"curto\": True\n",
        "    }\n",
        "}\n",
        "\n",
        "# Perguntas\n",
        "QUESTOES = {\n",
        "    \"programacao\": \"O curso é focado em programação?\",\n",
        "    \"hardware\": \"O curso envolve bastante hardware e eletrônica?\",\n",
        "    \"gestao\": \"O curso tem foco em gestão de projetos e negócios?\",\n",
        "    \"redes\": \"O curso envolve redes de computadores?\",\n",
        "    \"design\": \"O curso é voltado para design ou criação visual?\",\n",
        "    \"dados\": \"O curso trabalha fortemente com dados?\",\n",
        "    \"engenharia\": \"O curso tem abordagem de engenharia?\",\n",
        "    \"matematica_pesada\": \"O curso exige muita matemática?\",\n",
        "    \"curto\": \"O curso é tecnólogo (curta duração)?\"\n",
        "}\n",
        "\n",
        "def normaliza_resposta(s: str):\n",
        "    s = s.strip().lower()\n",
        "    if s in (\"s\", \"sim\", \"y\", \"yes\"): return True\n",
        "    if s in (\"n\", \"nao\", \"não\", \"no\"): return False\n",
        "    return None\n",
        "\n",
        "def melhor_pergunta(candidatos, perguntas_restantes):\n",
        "    melhor, melhor_dist = None, 1.0\n",
        "    for p in perguntas_restantes:\n",
        "        valores = [KB[c][p] for c in candidatos]\n",
        "        if not valores:\n",
        "            continue\n",
        "        proporcao = sum(valores) / len(valores)\n",
        "        dist = abs(proporcao - 0.5)\n",
        "        if dist < melhor_dist:\n",
        "            melhor, melhor_dist = p, dist\n",
        "    return melhor\n",
        "\n",
        "def jogar():\n",
        "    print(\"🎓 Pense em um CURSO de TECNOLOGIA e eu tentarei adivinhar!\")\n",
        "    candidatos = list(KB.keys())\n",
        "    perguntas_restantes = list(QUESTOES.keys())\n",
        "\n",
        "    while True:\n",
        "        if len(candidatos) == 0:\n",
        "            print(\"🤔 Não consegui encontrar seu curso.\")\n",
        "            break\n",
        "        if len(candidatos) == 1:\n",
        "            palpite = candidatos[0]\n",
        "            resp = input(f\"É o curso de {palpite}? [s/n] \")\n",
        "            if normaliza_resposta(resp) is True:\n",
        "                print(\"🎉 Acertei!\")\n",
        "            else:\n",
        "                print(\"😅 Errei dessa vez.\")\n",
        "            break\n",
        "\n",
        "        p = melhor_pergunta(candidatos, perguntas_restantes)\n",
        "        if p is None:\n",
        "            print(\"Cheguei no limite de perguntas. Cursos restantes:\", \", \".join(candidatos))\n",
        "            break\n",
        "\n",
        "        resp = input(f\"{QUESTOES[p]} [s/n/?] \")\n",
        "        val = normaliza_resposta(resp)\n",
        "        perguntas_restantes.remove(p)\n",
        "        if val is None:\n",
        "            continue\n",
        "        candidatos = [c for c in candidatos if KB[c][p] == val]\n",
        "\n",
        "def main():\n",
        "    while True:\n",
        "        jogar()\n",
        "        denovo = input(\"Quer jogar de novo? [s/n] \")\n",
        "        if normaliza_resposta(denovo) is not True:\n",
        "            print(\"Obrigado por jogar! 👩‍💻👨‍💻\")\n",
        "            break\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ],
      "metadata": {
        "id": "ve8WuD02Ic9k"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Mini-Akinator: Heróis da Marvel\n",
        "# Responda: s (sim), n (não), ? (não sei/pular)\n",
        "\n",
        "from collections import defaultdict\n",
        "\n",
        "# --- Base de conhecimento (pode expandir) ---\n",
        "KB = {\n",
        "    \"Homem de Ferro\": {\n",
        "        \"usa_armadura\": True, \"usa_martelo\": False, \"forca_sobreumana\": False,\n",
        "        \"usa_escudo\": False, \"teia\": False, \"mutante\": False, \"magia\": False,\n",
        "        \"voa\": True, \"verde\": False, \"feminino\": False, \"wakanda\": False,\n",
        "        \"vingador\": True\n",
        "    },\n",
        "    \"Capitão América\": {\n",
        "        \"usa_armadura\": False, \"usa_martelo\": False, \"forca_sobreumana\": True,\n",
        "        \"usa_escudo\": True, \"teia\": False, \"mutante\": False, \"magia\": False,\n",
        "        \"voa\": False, \"verde\": False, \"feminino\": False, \"wakanda\": False,\n",
        "        \"vingador\": True\n",
        "    },\n",
        "    \"Thor\": {\n",
        "        \"usa_armadura\": False, \"usa_martelo\": True, \"forca_sobreumana\": True,\n",
        "        \"usa_escudo\": False, \"teia\": False, \"mutante\": False, \"magia\": True,\n",
        "        \"voa\": True, \"verde\": False, \"feminino\": False, \"wakanda\": False,\n",
        "        \"vingador\": True\n",
        "    },\n",
        "    \"Hulk\": {\n",
        "        \"usa_armadura\": False, \"usa_martelo\": False, \"forca_sobreumana\": True,\n",
        "        \"usa_escudo\": False, \"teia\": False, \"mutante\": False, \"magia\": False,\n",
        "        \"voa\": False, \"verde\": True, \"feminino\": False, \"wakanda\": False,\n",
        "        \"vingador\": True\n",
        "    },\n",
        "    \"Viúva Negra\": {\n",
        "        \"usa_armadura\": False, \"usa_martelo\": False, \"forca_sobreumana\": False,\n",
        "        \"usa_escudo\": False, \"teia\": False, \"mutante\": False, \"magia\": False,\n",
        "        \"voa\": False, \"verde\": False, \"feminino\": True, \"wakanda\": False,\n",
        "        \"vingador\": True\n",
        "    },\n",
        "    \"Homem-Aranha\": {\n",
        "        \"usa_armadura\": False, \"usa_martelo\": False, \"forca_sobreumana\": True,\n",
        "        \"usa_escudo\": False, \"teia\": True, \"mutante\": False, \"magia\": False,\n",
        "        \"voa\": False, \"verde\": False, \"feminino\": False, \"wakanda\": False,\n",
        "        \"vingador\": True\n",
        "    },\n",
        "    \"Pantera Negra\": {\n",
        "        \"usa_armadura\": True, \"usa_martelo\": False, \"forca_sobreumana\": True,\n",
        "        \"usa_escudo\": False, \"teia\": False, \"mutante\": False, \"magia\": False,\n",
        "        \"voa\": False, \"verde\": False, \"feminino\": False, \"wakanda\": True,\n",
        "        \"vingador\": True\n",
        "    },\n",
        "    \"Doutor Estranho\": {\n",
        "        \"usa_armadura\": False, \"usa_martelo\": False, \"forca_sobreumana\": False,\n",
        "        \"usa_escudo\": False, \"teia\": False, \"mutante\": False, \"magia\": True,\n",
        "        \"voa\": True, \"verde\": False, \"feminino\": False, \"wakanda\": False,\n",
        "        \"vingador\": True\n",
        "    },\n",
        "    \"Tempestade\": {\n",
        "        \"usa_armadura\": False, \"usa_martelo\": False, \"forca_sobreumana\": False,\n",
        "        \"usa_escudo\": False, \"teia\": False, \"mutante\": True, \"magia\": False,\n",
        "        \"voa\": True, \"verde\": False, \"feminino\": True, \"wakanda\": False,\n",
        "        \"vingador\": False\n",
        "    },\n",
        "    \"Wolverine\": {\n",
        "        \"usa_armadura\": False, \"usa_martelo\": False, \"forca_sobreumana\": True,\n",
        "        \"usa_escudo\": False, \"teia\": False, \"mutante\": True, \"magia\": False,\n",
        "        \"voa\": False, \"verde\": False, \"feminino\": False, \"wakanda\": False,\n",
        "        \"vingador\": False\n",
        "    }\n",
        "}\n",
        "\n",
        "QUESTOES = {\n",
        "    \"usa_armadura\": \"Usa armadura tecnológica?\",\n",
        "    \"usa_martelo\": \"É conhecido por usar um martelo mágico?\",\n",
        "    \"forca_sobreumana\": \"Possui força sobre-humana?\",\n",
        "    \"usa_escudo\": \"Usa um escudo como arma principal?\",\n",
        "    \"teia\": \"Lança teias?\",\n",
        "    \"mutante\": \"É um mutante (X-Men)?\",\n",
        "    \"magia\": \"Usa magia?\",\n",
        "    \"voa\": \"Consegue voar?\",\n",
        "    \"verde\": \"É verde?\",\n",
        "    \"feminino\": \"É uma heroína (personagem feminina)?\",\n",
        "    \"wakanda\": \"É da nação de Wakanda?\",\n",
        "    \"vingador\": \"É integrante dos Vingadores?\"\n",
        "}\n",
        "\n",
        "def normaliza_resposta(s: str):\n",
        "    s = s.strip().lower()\n",
        "    if s in (\"s\", \"sim\", \"y\", \"yes\"): return True\n",
        "    if s in (\"n\", \"nao\", \"não\", \"no\"): return False\n",
        "    return None\n",
        "\n",
        "def melhor_pergunta(candidatos, perguntas_restantes):\n",
        "    melhor, melhor_dist = None, 1.0\n",
        "    for p in perguntas_restantes:\n",
        "        valores = [KB[c][p] for c in candidatos]\n",
        "        if not valores: continue\n",
        "        proporcao = sum(valores) / len(valores)\n",
        "        dist = abs(proporcao - 0.5)\n",
        "        if dist < melhor_dist:\n",
        "            melhor, melhor_dist = p, dist\n",
        "    return melhor\n",
        "\n",
        "def jogar():\n",
        "    print(\"🦸 Pense em um HERÓI da MARVEL e eu vou tentar adivinhar!\")\n",
        "    candidatos = list(KB.keys())\n",
        "    perguntas_restantes = list(QUESTOES.keys())\n",
        "\n",
        "    while True:\n",
        "        if len(candidatos) == 0:\n",
        "            print(\"🤔 Não consegui encontrar seu herói.\")\n",
        "            break\n",
        "        if len(candidatos) == 1:\n",
        "            palpite = candidatos[0]\n",
        "            resp = input(f\"É {palpite}? [s/n] \")\n",
        "            if normaliza_resposta(resp) is True:\n",
        "                print(\"🎉 Acertei!\")\n",
        "            else:\n",
        "                print(\"😅 Errei dessa vez.\")\n",
        "            break\n",
        "\n",
        "        p = melhor_pergunta(candidatos, perguntas_restantes)\n",
        "        if p is None:\n",
        "            print(\"Não tenho mais perguntas. Restam:\", \", \".join(candidatos))\n",
        "            break\n",
        "\n",
        "        resp = input(f\"{QUESTOES[p]} [s/n/?] \")\n",
        "        val = normaliza_resposta(resp)\n",
        "        perguntas_restantes.remove(p)\n",
        "        if val is None:\n",
        "            continue\n",
        "        candidatos = [c for c in candidatos if KB[c][p] == val]\n",
        "\n",
        "def main():\n",
        "    while True:\n",
        "        jogar()\n",
        "        dnv = input(\"Quer jogar de novo? [s/n] \")\n",
        "        if normaliza_resposta(dnv) is not True:\n",
        "            print(\"Valeu por jogar! Excelsior! ✨\")\n",
        "            break\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ],
      "metadata": {
        "id": "SwTIM13XbqVj"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}